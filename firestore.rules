rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow read access to all authenticated users for products and categories
    match /products/{productId} {
       allow read, write: if request.auth != null
    }
    
    match /categories/{categoryId} {
      allow read: if true; // Public read access for categories
      allow write: if request.auth != null 
    }
    
    // Users can read and write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Users can read and write their own cart items
      match /cart/{cartItemId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Orders can be read and created by the order owner
    match /orders/{orderId} {
      allow read, create: if request.auth != null && 
        (request.auth.uid == resource.data.userId || request.auth.uid == request.resource.data.userId);
      allow update: if request.auth != null && 
        (hasAdminRole(request.auth.uid) || request.auth.uid == resource.data.userId);
    }
    
    // Admin collection to track admin users
    match /admins/{adminId} {
      allow read: if request.auth != null && request.auth.uid == adminId;
    }
    
    // Helper function to check admin role
    function hasAdminRole(uid) {
      // For development, allow any authenticated user to be admin
      // In production, you should check against an admin collection
      return uid != null;
      
      // For production, uncomment this line and comment the line above:
      // return exists(/databases/$(database)/documents/admins/$(uid));
    }
  }
}
